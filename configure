#! /bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[0;33m'
NO_COLOR='\033[0m'

MESSAGE(){
  echo -ne "${CYAN}${1}... ${NO_COLOR}"
  if [[ $2 != "" ]]; then
    if [[ $2 != 0 ]]; then
      echo -ne "${1}..." >> $2 2>&1
    else
      echo -ne "${1}..." >> smash.log 2>&1
    fi
    echo
  else
    echo -ne "${1}..." >> smash.log 2>&1
  fi
}

LOG(){
  echo -e ${RED}
  echo -e "      ___          ___          ___          ___          ___      "
  echo -e "     /\  \        /\__\        /\  \        /\  \        /\__\     "
  echo -e "    /::\  \      /::|  |      /::\  \      /::\  \      /:/  /     "
  echo -e "   /:/\:\  \    /:|:|  |     /:/\:\  \    /:/\:\  \    /:/__/      "
  echo -e "  _\:\~\:\  \  /:/|:|__|__  /::\~\:\  \  _\:\~\:\  \  /::\  \ ___  "
  echo -e " /\ \:\ \:\__\/:/ |::::\__\/:/\:\ \:\__\/\ \:\ \:\__\/:/\:\  /\__\ "
  echo -e " \:\ \:\ \/__/\/__/~~/:/  /\/__\:\/:/  /\:\ \:\ \/__/\/__\:\/:/  / "
  echo -e "  \:\ \:\__\        /:/  /      \::/  /  \:\ \:\__\       \::/  /  "
  echo -e "   \:\/:/  /       /:/  /       /:/  /    \:\/:/  /       /:/  /   "
  echo -e "    \::/  /       /:/  /       /:/  /      \::/  /       /:/  /    "
  echo -e "     \/__/        \/__/        \/__/        \/__/        \/__/     "
  echo -e ${NO_COLOR}
  echo -e "${RED}                      Compression benchmark${NO_COLOR}"
  echo
  echo -e "${CYAN}More information in the file ${YELLOW}smash.log${NO_COLOR}"
}

END(){
  echo -e "${CYAN}Libraries are allocated in ${YELLOW}${PWD}/lib${NO_COLOR}"
  echo -e "${CYAN}Binaries are allocated in ${YELLOW}${PWD}/bin${NO_COLOR}"
}

COUNTER(){
  echo -ne "${YELLOW}["
  if [[ ${1} -lt 10 ]]; then
    echo -ne "0"
  fi
  echo -ne "${1}/${2}] ${NO_COLOR}"
  echo -ne "[${1}/${2}] " >> smash.log 2>&1
}

CHECK(){
  if [[ $? -eq 0 ]]; then
    echo -ne "${GREEN}[SUCCESS]${NO_COLOR}"
    echo
    if [[ $1 != "" ]]; then
      echo "[SUCCESS]" >> $1 2>&1
    else
      echo "[SUCCESS]" >> smash.log 2>&1
    fi
  else
    echo -ne "${RED}[FAIL]${NO_COLOR}"
    echo
    if [[ $1 != "" ]]; then
      echo "[FAIL]" >> $1 2>&1
    else
      echo "[FAIL]" >> smash.log 2>&1
    fi
    exit 1
  fi
}

REMOVE() {
  echo -ne "\r\033[K"
}

CHECK_LIBRARY() {
  COUNTER ${2} ${3}
  echo "$1" >> smash.log 2>&1
  cd compression_libraries/${1}_
  ./configure
  error=$?
  if [[ ! ${error} -eq 0 ]]; then
    if [[ ${error} -eq 2 ]]; then
      echo
      exit 1
    else
      echo
    fi
  else
    REMOVE
  fi
  cd ../..
}

FAIL_MESSAGE(){
  echo -e "${CYAN}Must be run:${NO_COLOR}"
  echo -e "${RED}\t$PWD/configure${NO_COLOR}"
  echo -e "${CYAN}Also, you can use the -n parameter followed by the name of libraries you don't want to compile separated by a space ${NO_COLOR}"
  exit 1
}

LIBRARIES=("brieflz" "brotli" "bzip2" "c-blosc2" "csc" "density" "flz" "flzma2" "fse" "gipfeli" "heatshrink" "libbsc" "libdeflate" "liblzg" "lizard" "lodepng" "lz4" "lzf" "lzfse" "lzfx" "lzham" "lzjb" "lzma" "lzmat" "lzo" "lzsse" "miniz" "ms" "pithy" "quicklz" "snappy" "ucl" "wflz" "xpack" "yalz77" "z3lib" "zlib" "zlib-ng" "zling" "zpaq" "zstd")
LIST_NO_LIBRARIES=("-DBRIEFLZ=OFF" "-DBROTLI=OFF" "-DBZIP2=OFF" "-DCBLOSC2=OFF" "-DCSC=OFF" "-DDENSITY=OFF" "-DFLZ=OFF" "-DFLZMA2=OFF" "-DFSE=OFF" "-DGIPFELI=OFF" "-DHEATSHRINK=OFF" "-DLIBBSC=OFF" "-DLIBDEFLATE=OFF" "-DLIBLZG=OFF" "-DLIZARD=OFF" "-DLODEPNG=OFF" "-DLZ4=OFF" "-DLZF=OFF" "-DLZFSE=OFF" "-DLZFX=OFF" "-DLZHAM=OFF" "-DLZJB=OFF" "-DLZMA=OFF" "-DLZMAT=OFF" "-DLZO=OFF" "-DLZSSE=OFF" "-DMINIZ=OFF" "-DMS=OFF" "-DPITHY=OFF" "-DQUICKLZ=OFF" "-DSNAPPY=OFF" "-DUCL=OFF" "-DWFLZ=OFF" "-DXPACK=OFF" "-DYALZ77=OFF" "-DZ3LIB=OFF" "-DZLIB=OFF" "-DZLIB_NG=OFF" "-DZLING=OFF" "-DZPAQ=OFF" "-DZSTD=OFF")
LIST_LIBRARIES=("-DBRIEFLZ=ON" "-DBROTLI=ON" "-DBZIP2=ON" "-DCBLOSC2=ON" "-DCSC=ON" "-DDENSITY=ON" "-DFLZ=ON" "-DFLZMA2=ON" "-DFSE=ON" "-DGIPFELI=ON" "-DHEATSHRINK=ON" "-DLIBBSC=ON" "-DLIBDEFLATE=ON" "-DLIBLZG=ON" "-DLIZARD=ON" "-DLODEPNG=ON" "-DLZ4=ON" "-DLZF=ON" "-DLZFSE=ON" "-DLZFX=ON" "-DLZHAM=ON" "-DLZJB=ON" "-DLZMA=ON" "-DLZMAT=ON" "-DLZO=ON" "-DLZSSE=ON" "-DMINIZ=ON" "-DMS=ON" "-DPITHY=ON" "-DQUICKLZ=ON" "-DSNAPPY=ON" "-DUCL=ON" "-DWFLZ=ON" "-DXPACK=ON" "-DYALZ77=ON" "-DZ3LIB=ON" "-DZLIB=ON" "-DZLIB_NG=ON" "-DZLING=ON" "-DZPAQ=ON" "-DZSTD=ON")
NO_LIBRARIES=()
if [ $# -gt 1 ]; then
  if [ $1 == "-n" ]; then
    for param in "$@"; do
      if [ ! $param == "-n" ]; then
        SET=0
        for (( i=0; i<${#LIBRARIES[@]}; i++ )); do
          if [ ${LIBRARIES[$i]} == $param ]; then
            SET=1
            NO_LIBRARIES=(${LIST_NO_LIBRARIES[$i]} "${NO_LIBRARIES[@]}")
            LIBRARIES=(${LIBRARIES[@]:0:$i} ${LIBRARIES[@]:$(($i+1))})
            LIST_NO_LIBRARIES=(${LIST_NO_LIBRARIES[@]:0:$i} ${LIST_NO_LIBRARIES[@]:$(($i+1))})
            LIST_LIBRARIES=(${LIST_LIBRARIES[@]:0:$i} ${LIST_LIBRARIES[@]:$(($i+1))})
            break
          fi
        done
        if [ $SET -eq 0 ]; then
          FAIL_MESSAGE
        fi
      fi
    done
  else
    FAIL_MESSAGE
  fi
elif [ $# -eq 1 ]; then
  FAIL_MESSAGE
fi

LOG
echo > smash.log
MESSAGE "Updating all submodules"
git submodule update --init --force >> smash.log 2>&1
CHECK

MESSAGE "Checking compression libraries" 0


N=1
for library in ${LIBRARIES[*]}; do
  CHECK_LIBRARY $library ${N} ${#LIBRARIES[@]}
  N=$(($N+1))
done
CHECK

MESSAGE "Configuring building"
if [[ -d build ]]; then
  cd build
else
  mkdir build; cd build
fi

cmake -DCMAKE_BUILD_TYPE=Release .. ${NO_LIBRARIES[@]} ${LIST_LIBRARIES[@]} >> ../smash.log 2>&1
CHECK ../smash.log

MESSAGE "Compiling source" ../smash.log
make -j >> ../smash.log 2>&1
CHECK ../smash.log
END